AWSTemplateFormatVersion: '2010-09-09'
Description: Script para executar o deploy de
  1 VPC
  2 public subnets  (default dev)
  2 AZs (default dev) Min 1 - Max 3
  1 internet gateway
  1 route table padrao para subnet publica
  1 a 3 private subnets se ambiente prod (baseado em NumberOfAZs)
  Min 1 - Max 3 AZs se ambiente prod
  1 route table padrao para subnet privada
  Min 1 - Max 3 Natgateway se ambiente prod
  
Parameters:
  EnvType:
    Description: Tipo do Ambiente
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: especifique o ambiente dev ou prod

  EnvironmentName:
    Description: O nome do ambiente prefixado nos nomes dos recursos gerados
    Type: String
    Default: trilhalabs-myapi

  VpcCIDR:
    Description: Range de IP (CIDR) para a VPC (Valor padrao 10.192.0.0/16)
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Range de IP (CIDR) para a subnet publica na primeira AZ (Valor padrao 10.192.10.0/24)
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Range de IP (CIDR) para a subnet publica na segunda AZ (Valor padrao 10.192.11.0/24)
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Range de IP (CIDR) para a subnet publica na terceira AZ (Valor padrao 10.192.12.0/24)
    Type: String
    Default: 10.192.12.0/24

  PrivateSubnet1CIDR:
    Description: Range de IP (CIDR) para a subnet publica na primeira AZ (Valor padrao 10.192.20.0/24)
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Range de IP (CIDR) para a subnet publica na segunda AZ (Valor padrao 10.192.21.0/24)
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Range de IP (CIDR) para a subnet publica na terceira AZ (Valor padrao 10.192.22.0/24)
    Type: String
    Default: 10.192.22.0/24

  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description:  Quantas AZs utilizaremos? (minimo 1 maximo 3)

Conditions:
  #Criacao de recursos especificos para ambiente de prod
  CreateProdResources: !Equals [ !Ref EnvType, prod ]

  #Somente construa o PublicSubnet2 se usar mais de um AZ
  BuildPublic2: !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 
  
  #Somente construa o PublicSubnet3 se usar 3 AZ
  BuildPublic3: !Equals [ !Ref NumberOfAZs, 3 ]
  
  #Somente construa o PrivateSubnet2 se 1) usar mais de um AZ, e se 2) ambiente for prod
  BuildPrivate2: !And [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ]], !Equals [ !Ref EnvType, prod ] ]

  #Somente construa o PrivateSubnet3 se 1) usar 3 AZ, e se 2) ambiente for prod
  BuildPrivate3: !And [ !Equals [!Ref NumberOfAZs, 3], !Equals [ !Ref EnvType, prod ] ] 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-${EnvType}"

#============== INTERNET GATEWAY =========================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-${EnvType}"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

#============== PUBLIC SUBNETS =========================
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPublic2
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: BuildPublic3
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Public Subnet (AZ3)

#============== PRIVATE SUBNETS: Enviroment PROD =========================
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivate2
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]  
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivate3
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Subnet (AZ3)

#============== NAT GATEWAYS: Enviroment PROD =========================
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Condition: CreateProdResources
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Condition: BuildPrivate2
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Condition: BuildPrivate3
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: CreateProdResources
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - ${EnvType}"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: BuildPrivate2
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - ${EnvType}"

  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: BuildPrivate3
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - ${EnvType}"

#============== PUBLIC ROUTE TABLES =========================
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - ${EnvType} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublic2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublic3
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

#============== PRIVATE ROUTE TABLES: Enviroment PROD =========================
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivate2
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: BuildPrivate2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivate3
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType} Private Routes (AZ3)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Condition: BuildPrivate3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

#============== SECURITY GROUP =========================
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group sem regras de entrada - no ingress rules"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${EnvType}-NoIngressSG

Outputs:
  VPC:
    Description: VPC criada
    Value: !Ref VPC
    Export:
      #Name: !Sub ${AWS::StackName}-${EnvType}-VPC
      Name: !Sub ${EnvironmentName}-${EnvType}-VPC

  #PublicSubnets:
  #  Description: Lista de subnets publicas
  #  Value: !Join [ ", ", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

  #PrivateSubnets:
  #  Description: A list of the private subnets
  #  Value: !Join [ ", ", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]

  PublicSubnet1:
    Description: Referencia da subnet publica na primeira AZ
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PublicSubnet1 

  PublicSubnet2:
    Description: Referencia da subnet publica na segunda AZ
    Condition: BuildPublic2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PublicSubnet2

  PublicSubnet3:
    Description: Referencia da subnet publica na terceira AZ
    Condition: BuildPublic3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PublicSubnet3

  PrivateSubnet1:
    Description: Referencia da subnet privada na primeira AZ
    Condition: CreateProdResources
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PrivateSubnet1

  PrivateSubnet2:
    Description: Referencia da subnet privada na segunda AZ
    Condition: BuildPrivate2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PrivateSubnet2

  PrivateSubnet3:
    Description: Referencia da subnet privada na terceira AZ
    Condition: BuildPrivate3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-PrivateSubnet3

  NatGateway1:
    Description: Referencia natgateway1 relacionado a private subnet1
    Condition: CreateProdResources
    Value: !Ref NatGateway1
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-NatGateway1

  NatGateway2:
    Description: Referencia natgateway2 relacionado a private subnet2
    Condition: BuildPrivate2
    Value: !Ref NatGateway2
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-NatGateway2

  NatGateway3:
    Description: Referencia natgateway3 relacionado a private subnet3
    Condition: BuildPrivate3
    Value: !Ref NatGateway3
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-NatGateway3

  NoIngressSecurityGroup:
    Description: Security group sem regras de entrada - no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-${EnvType}-NoIngressSecurityGroup